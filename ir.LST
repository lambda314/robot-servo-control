C51 COMPILER V9.01   IR                                                                    11/19/2016 22:07:35 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN ir.OBJ
COMPILER INVOKED BY: d:\C51\BIN\C51.EXE ir.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "ir.h"
   2          #include "uart.h"
   3          
   4          //本解码程序适用于NEC的upd6121及其兼容芯片的解码，支持大多数遥控器 实验板采用22.1184MHZ晶振
   5          
   6           
   7          uchar IrCode[4];                                //储存用户码、用户反码与键数据码、键数据反码
   8          uint  LowTime,HighTime;                         //储存高、低电平的宽度 
   9          
  10          
  11          void int0_init(void)
  12          {
  13   1          IP |= 0x01;                                         //PX0=1;
  14   1              IPH|= 0x01;                                         //PX0H=1;PX0H:PX0=1:1;外部中断0为最高优先级中断（优先级3）
  15   1              IT0 = 1;                        //set INT0 int type (1:Falling 0:Low level)
  16   1          EX0 = 1;                        //enable INT0 interrupt
  17   1          EA = 1;                         //open global interrupt switch
  18   1              IR = 1;
  19   1      
  20   1      }
  21          /**********************************************<+><+><+><+><+>★【robot】★<+><+><+><+><+>****************
             -********************************
  22          函数名称：decode_ir
  23          函数功能：对4个字节的用户码和键数据码进行解码
  24          输入参数：无
  25          输出参数：bit 解码正确，返回1，否则返回0
  26          ***********************************************<<<<<<<<<<<<<<<★【robot】★>>>>>>>>>>>>>>>****************
             -********************************/
  27          bit decode_ir(void)        
  28          {
  29   1          
  30   1              uchar  i,j;
  31   1              uchar temp;                                                                     //储存解码出的数据
  32   1              for(i=0;i<4;i++)                                                        //连续读取4个用户码和键数据码
  33   1              {
  34   2                      for(j=0;j<8;j++)                                                        //每个码有8位数字
  35   2                      {
  36   3                              temp=temp>>1;                                                   //temp中的各数据位左移一位，因为先读出的是低位数据                                                                      
  37   3                              TH1=0;                                                          //定时器1清0
  38   3                              TL1=0;                                                          //定时器1清0
  39   3                              TR1=1;                                                          //开启定时器T
  40   3                              while(!IR);                                                     //如果是低电平就等待
  41   3                              TR1=0;                                                          //关闭定时器T0
  42   3                              LowTime=TH1*256+TL1;                                    //保存低电平宽度
  43   3                              if((LowTime<922)||(LowTime>1100))               //Low level 5~6ms
  44   3                              return 0;                                               //如果低电平长度不在合理范围，则认为出错，停止解码                      
  45   3                              TH1=0;                                                          //定时器1清0
  46   3                              TL1=0;                                                          //定时器1清0
  47   3                              TR1=1;                                                          //开启定时器T1
  48   3                              while(IR);                                                      //如果是高电平就等待               
  49   3                              TR1=0;                                                          //关闭定时器T0
  50   3                              HighTime=TH1*256+TL1;                                   //保存高电平宽度
  51   3                              if((HighTime>932)&&(HighTime<1132))     //如果高电平时间在560微秒左右，即计数560／1.085＝516次   560/0.54
             -25=1032
  52   3                              temp=temp&0x7f;                                 //(520-100=420, 520+100=620)，则该位是0
C51 COMPILER V9.01   IR                                                                    11/19/2016 22:07:35 PAGE 2   

  53   3                              if((HighTime>2897)&&(HighTime<3297))    //如果高电平时间在1680微秒左右，即计数1680／1.085＝1548次 1680/0.
             -5425=3097
  54   3                              temp=temp|0x80;                                 //(1550-250=1300,1550+250=1800),则该位是1
  55   3                      }                                   
  56   2                      IrCode[i]=temp;                                                         //将解码出的字节值储存在a[i]                                                                                                                                                                     
  57   2              }                                                
  58   1              if(IrCode[2]=~IrCode[3])                                                //验证键数据码和其反码是否相等,一般情况下不必验证用户码
  59   1                      return 1;                                                               //解码正确，返回1
  60   1      }
  61          
  62           /**********************************************<+><+><+><+><+>★【robot】★<+><+><+><+><+>***************
             -*********************************
  63          函数功能：红外线触发的外中断处理函数
  64          ***********************************************<<<<<<<<<<<<<<<★【robot】★>>>>>>>>>>>>>>>****************
             -********************************/
  65          void Int0(void) interrupt 0
  66          {
  67   1              uchar i;
  68   1              EX0=0;                                                                          //关闭外中断1，不再接收二次红外信号的中断，只解码当前红外信号
  69   1              TH1=0;                                                                          //定时器T1的高8位清0
  70   1              TL1=0;                                                                          //定时器T1的低8位清0
  71   1              TR1=1;                                                                          //开启定时器T1   
  72   1              while(!IR);                                                             //如果是低电平就等待，给引导码低电平计时
  73   1              TR1=0;                                                                  //关闭定时器T0     
  74   1              LowTime=TH1*256+TL1;                                                    //保存低电平时间
  75   1              if((LowTime>7795)&&(LowTime<17090))                             //17090
  76   1              {
  77   2                      TH1=0;                                                                  //定时器T1的高8位清0
  78   2                      TL1=0;                                                                  //定时器T1的低8位清0
  79   2                      TR1=1;                                                                  //开启定时器T1
  80   2                      while(IR);                                                              //如果是高电平就等待，给引导码高电平计时
  81   2                      TR1=0;                                                                  //关闭定时器T0
  82   2                      HighTime=TH1*256+TL1;                                           //保存引导码的高电平长度
  83   2                      if((HighTime>7795)&&(HighTime<8795))
  84   2                      {
  85   3                                                                                                              //如果是引导码,就开始解码,否则放弃,引导码的低电平计时
  86   3                                                                                                              //次数＝9000us/0.5425=16590, 判断区间:17090-500＝16590，17090＋500＝17590;4500/0.5425=8295
  87   3                              //if(decode_ir())                                                       // 执行遥控解码功能
  88   3                              {       
  89   4                                      //for(i=0;i<4;i++)
  90   4                                      //      send1_char(IrCode[i]);                          
  91   4                              }
  92   3                      }
  93   2              }
  94   1              EX0=1;                                                                                  //开启外中断EX1
  95   1      } 
*** WARNING C280 IN LINE 67 OF IR.C: 'i': unreferenced local variable
*** WARNING C291 IN LINE 60 OF IR.C: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    295    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
